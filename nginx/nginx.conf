worker_processes auto;

events {
    worker_connections 1024;
}

http {
    lua_package_path "/usr/local/share/lua/5.1/?.lua;;";
    lua_package_cpath "/usr/local/lib/lua/5.1/?.so;;";

    # Consul resolver for service discovery
    resolver consul:8600 valid=10s;

    server {
        listen 80;
        server_name localhost;

        # API Gateway proxying
        location /auth/api/ {
            set $auth_service_host auth_service.service.consul;
            proxy_pass http://auth_service:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
        }

        location /file/api/ {
            set $python_service_host python_service.service.consul;
            proxy_pass http://python_service:8001;

            # Allow larger file uploads
            client_max_body_size 100M;
            proxy_buffering off;
            proxy_request_buffering off;

            # Preserve headers to ensure multipart/form-data is forwarded correctly
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Content-Type $content_type;

            # Timeout settings for large uploads
            proxy_connect_timeout 600;
            proxy_send_timeout 600;
            proxy_read_timeout 600;
            send_timeout 600;

            # Lua script for JWT authentication
            access_by_lua_block {
                local jwt = require "resty.jwt"
                local cookie = ngx.var.http_cookie

                -- Log the entire cookie for debugging
                ngx.log(ngx.ERR, "Cookies: ", cookie or "No cookies received")

                if not cookie then
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                -- Extract JWT token from cookies
                local token = string.match(cookie, "jwt=([^;]+)")

                -- Log the extracted JWT token
                ngx.log(ngx.ERR, "Extracted JWT Token: ", token or "No token found")

                if not token then
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                -- Your secret key (keep it secure)
                local secret_key = "1unLACOxPWcgg1jBekYsB_yvF86fLig1NGOB2uRB59FEpjMbuo4vddyhXTG7iNaxQ0U"

                -- Verify the JWT token
                local decoded, err = jwt:verify(secret_key, token)

                if not decoded or not decoded.verified then
                    ngx.log(ngx.ERR, "JWT Verification failed: ", err or "unknown error")
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                -- Extract user_id from the JWT payload
                local user_id = decoded.payload.user_id

                -- Log the decoded payload
                ngx.log(ngx.ERR, "Decoded JWT payload: ", require("cjson").encode(decoded.payload))

                if not user_id then
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                -- Pass the user ID to backend services via headers
                ngx.req.set_header("X-User-ID", user_id)
                ngx.log(ngx.ERR, "User ID set in header: ", user_id)
            }
        }


        # Serve React frontend (acting as a reverse proxy)
        location / {
            proxy_pass http://frontend:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Error handling
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}
